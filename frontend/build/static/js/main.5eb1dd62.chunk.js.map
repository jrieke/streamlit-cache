{"version":3,"sources":["UserIdComponent.tsx","index.tsx"],"names":["cookies","Cookies","UserIdComponent","render","all_cookies","getAll","console","log","user_id","get","uuidv4","inOneYear","Date","setFullYear","getFullYear","set","path","expires","domain","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"iRAaMA,EAAU,IAAIC,IAMdC,E,4MAGGC,OAAS,WAiBd,OAAO,M,uDAGT,WAEE,IAAIC,EAAcJ,EAAQK,SAC1BC,QAAQC,IAAIH,GAGZ,IAAII,EAAUR,EAAQS,IAAI,mBAC1B,GAAID,EACFF,QAAQC,IAAI,qCAAuCC,QAInD,GAFAF,QAAQC,IAAI,mCACZC,EAAUR,EAAQS,IAAI,qBAEpBH,QAAQC,IAAI,uCAAyCC,OAChD,CACLF,QAAQC,IAAI,qCAEZC,EAAUE,eAGV,IAAIC,EAAY,IAAIC,KACpBD,EAAUE,YAAYF,EAAUG,cAAgB,GAGhDd,EAAQe,IAAI,oBAAqBP,EAAS,CACxCQ,KAAM,IACNC,QAASN,IAEXX,EAAQe,IAAI,oBAAqBP,EAAS,CACxCQ,KAAM,IACNC,QAASN,EACTO,OAAQ,uBAEVZ,QAAQC,IACN,gEACEC,GAMRW,IAAUC,kBAAkBZ,O,GAhEFa,KAoFfC,cAAwBpB,GCnGvCqB,IAASpB,OACP,kBAAC,IAAMqB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.5eb1dd62.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { ReactNode } from \"react\"\nimport Cookies from \"universal-cookie\"\nimport { v4 as uuidv4 } from \"uuid\"\n\n// interface State {\n//   numClicks: number\n// }\n\nconst cookies = new Cookies()\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass UserIdComponent extends StreamlitComponentBase {\n  // public state = { numClicks: 0 }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    // const name = this.props.args[\"name\"]\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    // return (\n    //   <span>\n    //     Hello, {name}! &nbsp;\n    //     <button onClick={this.onClicked} disabled={this.props.disabled}>\n    //       Click Me!\n    //     </button>\n    //   </span>\n    // )\n    return null\n  }\n\n  public componentDidMount() {\n\n    var all_cookies = cookies.getAll()\n    console.log(all_cookies)\n    \n    // Check for existing user id in cookies.\n    var user_id = cookies.get(\"streamlit_token\") // for Streamlit Sharing\n    if (user_id) {\n      console.log(\"[Streamlit] Found existing token: \" + user_id)\n    } else {\n      console.log(\"[Streamlit] Couldn't find token\")\n      user_id = cookies.get(\"streamlit_user_id\")\n      if (user_id) {\n        console.log(\"[Streamlit] Found existing user id: \" + user_id)\n      } else {\n        console.log(\"[Streamlit] Couldn't find user id\")\n        // Create new random user id.\n        user_id = uuidv4()\n\n        // Set cookie expiry date one year from now.\n        var inOneYear = new Date()\n        inOneYear.setFullYear(inOneYear.getFullYear() + 1)\n\n        // Store new user id in cookie.\n        cookies.set(\"streamlit_user_id\", user_id, {\n          path: \"/\",\n          expires: inOneYear,\n        })\n        cookies.set(\"streamlit_user_id\", user_id, {\n          path: \"/\",\n          expires: inOneYear,\n          domain: \"share.streamlit.io\",\n        })\n        console.log(\n          \"[Streamlit] Couldn't find existing user id, storing new one: \" +\n            user_id\n        )\n      }\n    }\n\n    // Return user id to Streamlit, so we can read it in Python.\n    Streamlit.setComponentValue(user_id)\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  // private onClicked = (): void => {\n  //   // Increment state.numClicks, and pass the new value back to\n  //   // Streamlit via `Streamlit.setComponentValue`.\n  //   // this.setState(\n  //   //   prevState => ({ numClicks: prevState.numClicks + 1 }),\n  //   //   () => Streamlit.setComponentValue(this.state.numClicks)\n  //   // )\n\n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(UserIdComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport UserIdComponent from \"./UserIdComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserIdComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}