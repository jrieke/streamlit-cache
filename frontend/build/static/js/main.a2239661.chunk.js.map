{"version":3,"sources":["UserIdComponent.tsx","index.tsx"],"names":["cookies","Cookies","UserIdComponent","render","user_id","get","console","log","uuidv4","inOneYear","Date","setFullYear","getFullYear","set","path","expires","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"iRAaMA,EAAU,IAAIC,IAMdC,E,4MAGGC,OAAS,WAiBd,OAAQ,M,uDAGV,WAGE,IAAIC,EAAUJ,EAAQK,IAAI,qBAC1B,GAAID,EACFE,QAAQC,IAAI,uCAAyCH,OAChD,CAELA,EAAUI,eAGV,IAAIC,EAAY,IAAIC,KACpBD,EAAUE,YAAYF,EAAUG,cAAgB,GAGhDZ,EAAQa,IAAI,oBAAqBT,EAAS,CAAEU,KAAM,IAAMC,QAASN,IACjEH,QAAQC,IAAI,gEAAkEH,GAIhFY,IAAUC,kBAAkBb,O,GA3CFc,KAkEfC,cAAwBjB,GCjFvCkB,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a2239661.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\nimport { ReactNode } from \"react\"\nimport Cookies from 'universal-cookie';\nimport { v4 as uuidv4 } from 'uuid';\n\n// interface State {\n//   numClicks: number\n// }\n\nconst cookies = new Cookies();\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass UserIdComponent extends StreamlitComponentBase {\n  // public state = { numClicks: 0 }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    // const name = this.props.args[\"name\"]\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    // return (\n    //   <span>\n    //     Hello, {name}! &nbsp;\n    //     <button onClick={this.onClicked} disabled={this.props.disabled}>\n    //       Click Me!\n    //     </button>\n    //   </span>\n    // )\n    return (null);\n  }\n\n  public componentDidMount() {\n    \n    // Check for existing user id in cookies.\n    var user_id = cookies.get('streamlit_user_id')\n    if (user_id) {\n      console.log(\"[Streamlit] Found existing user id: \" + user_id)\n    } else {\n      // Create new random user id.\n      user_id = uuidv4()\n\n      // Set cookie expiry date one year from now.\n      var inOneYear = new Date();\n      inOneYear.setFullYear(inOneYear.getFullYear() + 1)\n\n      // Store new user id in cookie.\n      cookies.set('streamlit_user_id', user_id, { path: '/' , expires: inOneYear})\n      console.log(\"[Streamlit] Couldn't find existing user id, storing new one: \" + user_id)\n    }\n\n    // Return user id to Streamlit, so we can read it in Python.\n    Streamlit.setComponentValue(user_id);\n\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  // private onClicked = (): void => {\n  //   // Increment state.numClicks, and pass the new value back to\n  //   // Streamlit via `Streamlit.setComponentValue`.\n  //   // this.setState(\n  //   //   prevState => ({ numClicks: prevState.numClicks + 1 }),\n  //   //   () => Streamlit.setComponentValue(this.state.numClicks)\n  //   // )\n\n\n    \n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(UserIdComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport UserIdComponent from \"./UserIdComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserIdComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}